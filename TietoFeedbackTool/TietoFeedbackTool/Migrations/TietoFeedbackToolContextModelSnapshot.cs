// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TietoFeedbackTool.Persistence;

namespace TietoFeedbackTool.Migrations
{
    [DbContext(typeof(TietoFeedbackToolContext))]
    partial class TietoFeedbackToolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TietoFeedbackTool.Domain.Account", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("QuestionsKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.HasKey("Login");

                    b.HasIndex("QuestionsKey")
                        .IsUnique()
                        .HasFilter("[QuestionsKey] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TietoFeedbackTool.Domain.PuzzleAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(2000);

                    b.Property<int>("QuestionId");

                    b.Property<int?>("Rating");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("Datetime");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("PuzzleAnswers");
                });

            modelBuilder.Entity("TietoFeedbackTool.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountLogin")
                        .IsRequired();

                    b.Property<string>("Domain")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled");

                    b.Property<bool>("HasRating");

                    b.Property<bool>("IsBottom");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(200);

                    b.Property<string>("RatingType")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AccountLogin");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("TietoFeedbackTool.Domain.PuzzleAnswer", b =>
                {
                    b.HasOne("TietoFeedbackTool.Domain.Question")
                        .WithMany("PuzzleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TietoFeedbackTool.Domain.Question", b =>
                {
                    b.HasOne("TietoFeedbackTool.Domain.Account")
                        .WithMany("Questions")
                        .HasForeignKey("AccountLogin")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
